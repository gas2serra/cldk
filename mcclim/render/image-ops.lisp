(in-package :cldk-render-internals)

(defmethod set-image ((image image-mixin) design &key x y width height)
  (declare (type fixnum x y width height))
  (let ((set-fn (%image-set-fn image))
        (image-type (image-type image)))
    (let ((src-fn (pixeled-design-rgba-get-fn design)))
      (declare (type pixeled-design-fn src-fn))
      (do-image image x y width height (i j)
        (multiple-value-bind (red green blue alpha)
            (funcall src-fn i j)
          (%call-set-image-fn image-type set-fn 
                              i j red green blue alpha))))))

(defmethod set-image :around ((image image-mixin) (design pixeled-uniform-design)
                              &key (x 0) (y 0)
                                (width (image-width image))
                                (height (image-height image)))
  (if (region-equal (pixeled-design-region design) +everywhere+)
      (multiple-value-bind (red green blue alpha)
          (values
           (pixeled-uniform-design-red design)
           (pixeled-uniform-design-green design)
           (pixeled-uniform-design-blue design)
           (pixeled-uniform-design-alpha design))
        (set-image-color image red green blue :alpha alpha :x x :y y :width width :height height))
      (call-next-method)))

(defmethod fill-image :around ((image image-mixin) (design pixeled-uniform-design)
                               stencil &key (x 0) (y 0)
                                         (width (image-width image))
                                         (height (image-height image))
                                         (stencil-dx 0) (stencil-dy 0))
  (if (region-equal (pixeled-design-region design) +everywhere+)
      (multiple-value-bind (red green blue alpha)
          (values
           (pixeled-uniform-design-red design)
           (pixeled-uniform-design-green design)
           (pixeled-uniform-design-blue design)
           (pixeled-uniform-design-alpha design))
        (fill-image-color image red green blue stencil :alpha alpha :x x :y y
                          :width width :height height :stencil-dx stencil-dx :stencil-dy stencil-dy))
      (call-next-method)))

(defmethod fill-image ((image image-mixin) design (stencil (eql nil))
                       &key x y width height stencil-dx stencil-dy)
  (declare (type fixnum x y width height)
           (ignore stencil stencil-dx stencil-dy))
  (let ((blend-fn (%image-blend-fn image))
        (image-type (image-type image))
        (src-fn (pixeled-design-rgba-get-fn design)))
    (declare (type pixeled-design-fn src-fn))
    (do-image image x y width height (i j)
      (multiple-value-bind (red green blue alpha)
          (funcall src-fn i j)
        (%call-blend-image-fn image-type blend-fn 
                              i j red green blue alpha)))))

(defmethod fill-image ((image image-mixin) design stencil
                       &key x y width height stencil-dx stencil-dy)
  (declare (type fixnum x y width height))
  (let ((blend-fn (%image-blend-fn image))
        (image-type (image-type image))
        (src-fn (pixeled-design-rgba-get-fn design))
        (stencil-fn (image-alpha-get-fn stencil :dx stencil-dx :dy stencil-dy)))
    (declare (type image-alpha-get-fn stencil-fn)
             (type pixeled-design-fn src-fn))
    (do-image image x y width height (i j)
      (multiple-value-bind (red green blue alpha)
          (funcall src-fn i j)
        (let ((salpha (funcall stencil-fn i j)))
          (setf salpha (octet-mult salpha alpha))
          (%call-blend-image-fn image-type blend-fn 
                                i j red green blue salpha))))))
