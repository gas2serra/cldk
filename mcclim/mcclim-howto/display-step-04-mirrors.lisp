(load (asdf/pathname:merge-pathnames*
       (asdf/pathname:parse-unix-namestring "mcclim-howto/display-global.lisp")
       (asdf/pathname:pathname-directory-pathname (asdf:system-source-file :cldk))))

(defun display-step-04-0 (&optional (backend *backend*))
  (let* ((clim:*default-server-path* backend)
         (port (clim:find-port :server-path backend))
         (frame-manager (clim:find-frame-manager :port port))
         (my-app (clim:make-application-frame 'my-app-a)))
    (clim:adopt-frame frame-manager my-app)
    (let* ((top-pane (clim:frame-top-level-sheet my-app))
           (mirror (clim:sheet-mirror top-pane)))
      (log:info "show: ~A" (cldk:show-window mirror))
      (sleep 2)
      (log:info "hide: ~A" (cldk:hide-window mirror))
      (sleep 2)
      (log:info "show: ~A" (cldk:show-window mirror))
      (sleep 2)
      (log:info "bury: ~A" (cldk:bury-window mirror))
      (sleep 2)
      (log:info "raise: ~A" (cldk:raise-window mirror))
      (sleep 2)
      (clim:destroy-port port))))

(defun display-step-04-1 (&optional (backend *backend*))
  (let* ((clim:*default-server-path* backend)
         (port (clim:find-port :server-path backend))
         (frame-manager (clim:find-frame-manager :port port))
         (my-app (clim:make-application-frame 'my-app-a)))
    (clim:adopt-frame frame-manager my-app)
    (let* ((top-pane (clim:frame-top-level-sheet my-app))
           (mirror (clim:sheet-mirror top-pane)))
      (log:info "show: ~A" (cldk:show-window mirror))
      (sleep 1)
      (loop for i from 0 below 10 do
           (sleep 0.5)
           (log:info "size: ~A" (multiple-value-list (cldk:window-size mirror)))
           (log:info "position: ~A" (multiple-value-list (cldk:window-position mirror))))
      (clim:destroy-port port))))

(defun display-step-04-2 (&optional (backend *backend*))
  (let* ((clim:*default-server-path* backend)
         (port (clim:find-port :server-path backend))
         (frame-manager (clim:find-frame-manager :port port))
         (my-app (clim:make-application-frame 'my-app-a)))
    (clim:adopt-frame frame-manager my-app)
    (let* ((top-pane (clim:frame-top-level-sheet my-app))
           (mirror (clim:sheet-mirror top-pane)))
      (log:info "show: ~A" (cldk:show-window mirror))
      (sleep 1)
      (loop for i from 0 below 10 do
           (sleep 0.5)
           (log:info "pointer position: ~A" (multiple-value-list (cldk:window-pointer-position mirror))))
      (clim:destroy-port port))))

(defun display-step-04-3 (&optional (backend *backend*))
  (let* ((clim:*default-server-path* backend)
         (port (clim:find-port :server-path backend))
         (frame-manager (clim:find-frame-manager :port port))
         (my-app (clim:make-application-frame 'my-app-a)))
    (clim:adopt-frame frame-manager my-app)
    (let* ((top-pane (clim:frame-top-level-sheet my-app))
           (mirror (clim:sheet-mirror top-pane)))
      (log:info "show: ~A" (cldk:show-window mirror))
      (sleep 1)
      (loop for i from 0 below 10 do
           (sleep 0.2)
           (cldk:set-window-position mirror
                                     (+ (* i 10) 10)
                                     (+ (* i 10) 10)))
      (loop for i from 0 below 10 do
           (sleep 0.2)
           (cldk:set-window-size mirror
                                 (+ (* i 10) 10)
                                 (+ (* i 10) 10)))
      (clim:destroy-port port))))

(defun display-step-04-4 (&optional (backend *backend*))
  (let* ((clim:*default-server-path* backend)
         (port (clim:find-port :server-path backend))
         (frame-manager (clim:find-frame-manager :port port))
         (my-app (clim:make-application-frame 'my-app-a)))
    (clim:adopt-frame frame-manager my-app)
    (let* ((top-pane (clim:frame-top-level-sheet my-app))
           (mirror (clim:sheet-mirror top-pane)))
      (log:info "show: ~A" (cldk:show-window mirror))
      (sleep 1)
      (cldk:set-window-cursor mirror :busy)
      (sleep 1)
      (cldk:set-window-cursor mirror :i-beam)
      (sleep 1)
      (cldk:set-window-cursor mirror :default)
      (sleep 2)
      (clim:destroy-port port))))
