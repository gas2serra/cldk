(ql:quickload :cldk)
(ql:quickload :cldk-sdl2)
(ql:quickload :cldk-clx)

(defvar *s*)
#|
(log:info (cldk:map-over-servers #'cldk:server-path))
(cldk:map-over-servers #'cldk:destroy-server)
(cldk:map-over-servers #'cldki::kill-server)
(log:info (bt:all-threads))
|#

(defun simple-window-01 (backend)
  (let ((*s* (cldk:find-display-server :server-path backend)))
    (format *debug-io* "pixel: ~A~%" (cldk:screen-size *s*))
    (format *debug-io* "mm: ~A~%" (cldk:screen-size *s* 0 :millimeters))
    (format *debug-io* "in: ~A~%" (cldk:screen-size *s* 0 :inches))
    (format *debug-io* "dpi: ~A~%" (cldk:screen-dpi *s*))
    (let ((w (cldk:create-window *s* "Pippo" :mode :managed)))
      (cldk:show-window w)
      (format *debug-io* "Size: ~A~%" (multiple-value-list (cldk:window-size w)))
      (format *debug-io* "Pos: ~A~%" (multiple-value-list (cldk:window-position w)))
      (sleep 1)
      (cldk:hide-window w)
      (sleep 1)
      (cldk:show-window w)
      ;;(cldk:set-window-cursor w :busy)
      (format *debug-io* "updating size...~%")
      (cldk:set-window-size w 500 300 :block-p t)
      (format *debug-io* "Size!!: ~A~%" (multiple-value-list (cldk:window-size w :force-query-p t)))
      (sleep 1)
      ;;(cldk:set-window-cursor w :i-beam)
      (format *debug-io* "updating position 100 100...~%")
      (cldk:set-window-position w 100 100)
      (sleep 1)
      ;;(cldk:set-window-cursor w :default)
      (format *debug-io* "Size: ~A~%" (multiple-value-list (cldk:window-size w)))
      (format *debug-io* "Pos: ~A~%" (multiple-value-list (cldk:window-position w)))
      (sleep 1)
      (cldk:set-window-hints w :width 600 :height 600
                             :max-width 700 ;;:max-height 800
                             :min-width 500 ;;:min-height 400
                             )
      (sleep 1)
      (format *debug-io* "Size: ~A~%" (multiple-value-list (cldk:window-size w)))
      (format *debug-io* "Pos: ~A~%" (multiple-value-list (cldk:window-position w)))
      (sleep 1)
      (format *debug-io* "Pos: ~A~%" (multiple-value-list (cldk:window-position w)))
      (log:info "buring...")
      (cldk:bury-window w :block-p t)
      (sleep 2)
      (log:info "raising...")
      (cldk:raise-window w :block-p t)
      (sleep 1)
      (format *debug-io* "mouse pos: ~A~%" (cldk:window-pointer-position w))
      (format *debug-io* "mouse global pos: ~A~%" (cldk:screen-pointer-position *s*))
      (cldk:destroy-window w)
      )))

(defun simple-window-02 (backend)
  (let ((*s* (cldk:find-display-server :server-path backend)))
    (let ((w (cldk:create-window *s* "Pippo" :mode :managed)))
      (cldk:show-window w)
      (sleep 1)
      (cldk:set-window-cursor w :busy)
      (sleep 1)
      (cldk:set-window-cursor w :i-beam)
      (sleep 1)
      (cldk:set-window-cursor w :default)
      (cldk:destroy-window w))))


(defun simple-window-03 (backend)
  (let ((*s* (cldk:find-display-server :server-path backend)))
    (let ((w (cldk:create-window *s* "Pippo" :mode :managed))
          (cursors (cldk:avaiable-cursor-names *s*)))
      (format *debug-io* "~A~%" cursors)
      (cldk:show-window w)
      (sleep 1)
      (loop for cur in cursors do
           (format *debug-io* "~A~%" cur)
           (cldk:set-window-cursor w cur)
           (sleep 1))
      (cldk:destroy-window w))))

(defun simple-window-04 (backend &optional (sec 10))
  (let ((*s* (cldk:find-display-server :server-path backend)))
    (setf (cldk:server-event-handler *s*)
                                     (make-instance 'cldk:event-handler))
    (let ((w (cldk:create-window *s* "Pippo" :mode :managed)))
      (cldk:show-window w)
      (sleep sec)
      (cldk:destroy-window w))))

(defun simple-window-05 (backend)
  (let ((*s* (cldk:find-display-server :server-path backend)))
    (setf (cldk:server-event-handler *s*)
                                     (make-instance 'cldk:event-handler))
    (let ((w (cldk:create-window *s* "Pippo" :mode :managed)))
      (cldk:show-window w)
      (sleep 5)
      (format *debug-io* "Pos: ~A~%" (multiple-value-list (cldk:window-position w)))
      (format *debug-io* "mouse pos: ~A~%" (cldk:window-pointer-position w))
      (format *debug-io* "mouse global pos: ~A~%" (cldk:screen-pointer-position *s*))
      (cldk:destroy-window w))))
