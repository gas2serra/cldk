(in-package :cldk-render-internals)

#+nil (declaim (optimize speed))

(defmethod image-rgb-blend-fn ((image opticl-rgb-image) &key (dx 0) (dy 0))
  (let ((pixels (image-pixels image)))
    (declare (type opticl-rgb-image-pixels pixels)
             (type fixnum dx dy))
    (lambda (x y red green blue alpha)
      (declare (type fixnum x y)
               (type octet red green blue alpha))
      (if (< alpha 220)
          (multiple-value-bind (r g b)
              (opticl:pixel pixels (+ y dy) (+ x dx))
            (multiple-value-bind (nr ng nb)
                (octet-rgb-blend-function red green blue alpha r g b)
              (setf (opticl:pixel pixels (+ y dy) (+ x dx))
                    (values nr ng nb))))
          (progn
            (setf (opticl:pixel pixels (+ y dy) (+ x dx))
                  (values red green blue)))))))

(defmethod image-rgba-blend-fn ((image opticl-rgba-image) &key (dx 0) (dy 0))
  (let ((pixels (image-pixels image)))
    (declare (type opticl-rgba-image-pixels pixels)
             (type fixnum dx dy))
    (lambda (x y red green blue alpha)
      (declare (type fixnum x y)
               (type octet red green blue alpha))
      (if (< alpha 220)
          (multiple-value-bind (r g b a)
              (opticl:pixel pixels (+ y dy) (+ x dx))
            (multiple-value-bind (nr ng nb na)
                (octet-rgba-blend-function red green blue alpha r g b a)
              (setf (opticl:pixel pixels (+ y dy) (+ x dx))
                    (values nr ng nb na))))
          (progn
            (setf (opticl:pixel pixels (+ y dy) (+ x dx))
                  (values red green blue alpha)))))))

(defmethod image-rgb-xor-blend-fn ((image opticl-rgb-image) &key (dx 0) (dy 0))
  (let ((pixels (image-pixels image)))
    (declare (type opticl-rgb-image-pixels pixels)
             (type fixnum dx dy))
    (lambda (x y red green blue alpha)
      (declare (type fixnum x y)
               (type octet red green blue alpha))
      (multiple-value-bind (r g b)
          (opticl:pixel pixels (+ y dy) (+ x dx))
        (multiple-value-bind (nr ng nb)
            (octet-rgb-blend-function
             (color-octet-xor r red)
             (color-octet-xor g green)
             (color-octet-xor b blue)
             alpha r g b)
          (setf (opticl:pixel pixels (+ y dy) (+ x dx))
                (values nr ng nb)))))))

(defmethod image-rgb-blend-span-fn ((image opticl-rgb-image) &key (dx 0) (dy 0))
  (let ((pixels (image-pixels image)))
    (declare (type opticl-rgb-image-pixels pixels)
             (type fixnum dx dy))
    (lambda (x1 y1 x2 y2 red green blue alpha)
      (declare (type fixnum x1 y1 x2 y2)
               (type octet red green blue alpha))
      (if (< alpha 220)
          (loop for y from y1 to y2 do
               (loop for x from x1 to x2 do
                    (multiple-value-bind (r g b)
                        (opticl:pixel pixels (+ y dy) (+ x dx))
                      (multiple-value-bind (nr ng nb)
                          (octet-rgb-blend-function red green blue alpha r g b)
                        (setf (opticl:pixel pixels (+ y dy) (+ x dx))
                              (values nr ng nb))))))
          (loop for y from y1 to y2 do
               (loop for x from x1 to x2 do
                    (progn
                      (setf (opticl:pixel pixels (+ y dy) (+ x dx))
                            (values red green blue)))))))))

(defmethod image-gray-set-span-fn ((image opticl-gray-image) &key (dx 0) (dy 0))
   (let ((pixels (image-pixels image)))
    (declare (type opticl-gray-image-pixels pixels)
             (type fixnum dx dy))
    (lambda (x1 y1 x2 y2 gray)
      (declare (type fixnum x1 y1 x2 y2)
               (type octet gary))
      (loop for y from y1 to y2 do
           (loop for x from x1 to x2 do
                (progn
                  (setf (opticl:pixel pixels (+ y dy) (+ x dx)) gray)))))))
