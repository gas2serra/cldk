(load (asdf/pathname:merge-pathnames*
       (asdf/pathname:parse-unix-namestring "mcclim-howto/display-global.lisp")
       (asdf/pathname:pathname-directory-pathname (asdf:system-source-file :cldk))))

(defun display-step-03-0 (&optional (backend *backend*))
  (let* ((clim:*default-server-path* backend)
         (port (clim:find-port :server-path backend))
         (frame-manager (clim:find-frame-manager :port port))
         (my-app (clim:make-application-frame 'my-app-a)))
    (clim:adopt-frame frame-manager my-app)
    (let ((top-pane (clim:frame-top-level-sheet my-app)))
      (log:info "enabled: ~A" (clim:sheet-enabled-p top-pane))
      (clim:enable-frame my-app)
      (log:info "enabled: ~A" (clim:sheet-enabled-p top-pane))
      (sleep 2)
      (clim:disable-frame my-app)
      (log:info "enabled: ~A" (clim:sheet-enabled-p top-pane))
      (sleep 2)
      (clim:enable-frame my-app)
      (log:info "enabled: ~A" (clim:sheet-enabled-p top-pane))
      (sleep 2)
      (clim:disown-frame frame-manager my-app)
      (log:info "enabled: ~A" (clim:sheet-enabled-p top-pane))
      (log:info "viewable: ~A" (clim:sheet-viewable-p top-pane))
      (sleep 2)
      (clim:destroy-port port))))

(defun display-step-03-1 (&optional (backend *backend*))
  (let* ((clim:*default-server-path* backend)
         (port (clim:find-port :server-path backend))
         (frame-manager (clim:find-frame-manager :port port))
         (my-app (clim:make-application-frame 'my-app-a)))
    (clim:adopt-frame frame-manager my-app)
    (clim:enable-frame my-app) 
    (let ((top-pane (clim:frame-top-level-sheet my-app)))
      (log:info "Region: ~A" (clim:sheet-region top-pane))
      (sleep 2)
      (clim:disown-frame frame-manager my-app)
      (sleep 2)
      (clim:destroy-port port))))

(defun display-step-03-2 (&optional (backend *backend*))
  (let* ((clim:*default-server-path* backend)
         (port (clim:find-port :server-path backend))
         (frame-manager (clim:find-frame-manager :port port))
         (my-app (clim:make-application-frame 'my-app-a)))
    (clim:adopt-frame frame-manager my-app)
    (clim:enable-frame my-app)
    (bt:make-thread
     (lambda ()
       (clim:run-frame-top-level my-app)))
    (let ((top-pane (clim:frame-top-level-sheet my-app)))
      (loop for i from 0 below 10 do
           (log:info "Region: ~A" (clim:sheet-region top-pane))
           (log:info "Global Region: ~A" (clim:transform-region
                                   (clim:sheet-delta-transformation top-pane (clim:graft my-app))
                                   (clim:sheet-region top-pane)))
           (sleep 1))
      (clim:disown-frame frame-manager my-app)
      (sleep 2)
      ;;(clim:frame-exit my-app)
      (sleep 2)
      (clim:destroy-port port))))

(defun display-step-03-3 (&optional (backend *backend*))
  (let* ((clim:*default-server-path* backend)
         (port (clim:find-port :server-path backend))
         (frame-manager (clim:find-frame-manager :port port))
         (my-app (clim:make-application-frame 'my-app-a)))
    (clim:adopt-frame frame-manager my-app)
    (clim:enable-frame my-app)
    (bt:make-thread
     (lambda ()
       (clim:run-frame-top-level my-app)))
    (sleep 1)
    (let ((top-pane (clim:frame-top-level-sheet my-app)))
      (loop for i from 0 below 10 do
           (setf (clim:sheet-region top-pane)
                 (clim:make-rectangle* 0 0 (+ 150 (* 10 i)) (- 150 (* 10 i))))
           (log:info "Region: ~A" (clim:sheet-region top-pane))
           (log:info "Global Region: ~A" (clim:transform-region
                                   (clim:sheet-delta-transformation top-pane (clim:graft my-app))
                                   (clim:sheet-region top-pane)))
           (sleep 0.5))
      (clim:disown-frame frame-manager my-app)
      (sleep 2)
      ;;(clim:frame-exit my-app)
      (sleep 2)
      (clim:destroy-port port))))

(defun display-step-03-4 (&optional (backend *backend*))
  (let* ((clim:*default-server-path* backend)
         (port (clim:find-port :server-path backend))
         (frame-manager (clim:find-frame-manager :port port))
         (my-app (clim:make-application-frame 'my-app-a)))
    (clim:adopt-frame frame-manager my-app)
    (clim:enable-frame my-app)
    (bt:make-thread
     (lambda ()
       (clim:run-frame-top-level my-app)))
    (sleep 1)
    (let ((top-pane (clim:frame-top-level-sheet my-app)))
      (loop for i from 0 below 10 do
           (setf (clim:sheet-region top-pane)
                 (clim:make-rectangle* 10 -10 150 150))
           (log:info "Region: ~A (BUG)" (clim:sheet-region top-pane))
           (log:info "Global Region: ~A (BUG)" (clim:transform-region
                                   (clim:sheet-delta-transformation top-pane (clim:graft my-app))
                                   (clim:sheet-region top-pane)))
           (sleep 0.5))
      (clim:disown-frame frame-manager my-app)
      (sleep 2)
      ;;(clim:frame-exit my-app)
      (sleep 2)
      (clim:destroy-port port))))
